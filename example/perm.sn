reload("./algo/sort")

// Demonstrates how to wrap imperative code under a functional interface.

// An imperative algorithm for generating all permutations of an array.
function first_item(arr)
  letseq (len = array_length(arr),
          f = len-1)
   for (i = 0 to len-2)
   { when (arr[i] < arr[i+1]) f = i; f }

function last_item(arr, f)
  let (len = array_length(arr),
       fi = arr[f],
       c = -1)
   for (i = len-1 downto f+1)
     let (ii = arr[i])
     { when (ii > fi && (c == -1 || ii < arr[c]))
        c = i
       c }

function swap(arr, i, j)
  let (ii = arr[i])
  { arr[i] = arr[j]
    arr[j] = ii }

function sort_subarray(arr, offset, len)
  letseq (end = offset + (len-1),
          sub = subarray(arr, offset, end))
  { quick(sub)
    subarray_move(sub, 0, end-offset, arr, offset) }

function next_permutation(arr)
  letseq (arr_copy = array_copy(arr),
          f = first_item(arr),
          c = last_item(arr, f))
  { swap(arr_copy, f, c)
    sort_subarray(arr_copy, f+1, array_length(arr_copy) - 1 - f)
    arr_copy }

function is_non_increasing(arr)
  let (len = array_length(arr))
    or(len <= 1,
       for (i = 0 to len - 2)
         if (arr[i+1] > arr[i]) break(false)
         else true)

function all_permutations(arr)
  let (copy = array_copy(arr))
  { quick(copy)
    let loop (perm = copy, perms = [])
      if (is_non_increasing(perm)) reverse(perms)
      else let (p = next_permutation(perm))
            loop(p, p:perms) }

// Hide the imperative permutations under lazy-sequences.
function perms(arr)
  arr:~if(is_non_increasing(arr)) // repeat the cycle...
        let (c = array_copy(arr))
        { quick(c); perms(c) }
       else perms(next_permutation(arr)) }