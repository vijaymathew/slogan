// bit streams

// read and write TCP headers.

function int_to_bool(i) if (is_number(i)) not(is_zero(i)) else i
function bool_to_int(b) if (b) 1 else 0

function write_tcp_header(filename, header)
  letseq (out = file_writer(filename),
          bits = bits_writer(out))
    try
    { write_bits(bits, header['source_port], 16)
      write_bits(bits, header['destination_port], 16)
      write_bits(bits, header['sequence], 31)
      write_bits(bits, header['acknowledgement_number], 31)
      write_bits(bits, 5, 4) // data offset
      write_bits(bits, 0, 6) // reserved
      let (flags = header['flags])
      { write_bit(bits, bool_to_int(flags['urgent]))
        write_bit(bits, bool_to_int(flags['ack]))
        write_bit(bits, bool_to_int(flags['push]))
        write_bit(bits, bool_to_int(flags['reset]))
        write_bit(bits, bool_to_int(flags['syn]))
        write_bit(bits, bool_to_int(flags['fin])) }
      write_bits(bits, header['receive_window_size], 16)
      write_bits(bits, header['checksum], 16)
      write_bits(bits, header['urgent_pointer], 16)
      flush_writer(bits) }
    finally close_stream(out)

function read_tcp_header(filename)
  letseq (in = file_reader(filename),
          b = bits_reader(in))
    try
      let (src_port = read_bits(b, 16),
           dest_port = read_bits(b, 16),
           seq_number = read_bits(b, 31),
           ack_number = read_bits(b, 31),
           _ = read_bits(b, 4),
           _ = read_bits(b, 6),
           urgent = read_bit(b),
           ack = read_bit(b),
           push = read_bit(b),
           reset = read_bit(b),
           syn = read_bit(b),
           fin = read_bit(b),
           receive = read_bits(b, 16),
           checksum = read_bits(b, 16),
           urgent_pointer = read_bits(b, 16))
         #{'source_port: src_port,
           'destination_port: dest_port,
           'sequence: seq_number,
           'acknowledgement_number: ack_number,
           'flags: #{'urgent: int_to_bool(urgent),
                     'ack: int_to_bool(ack),
                     'push: int_to_bool(push),
                     'reset: int_to_bool(reset),
                     'syn: int_to_bool(syn),
                     'fin: int_to_bool(fin)},
            'receive_window_size: receive,
            'checksum: checksum,
            'urgent_pointer: urgent_pointer}
     finally close_stream(in)

let tcp_hdr = #{'checksum: 888, 'urgent_pointer: 63404,
                'flags: #{'fin: false, 'syn: false, 'push: false,
                          'ack: false, 'reset: false, 'urgent: false},
                'acknowledgement_number: 1481973485, 'destination_port: 47892,
                'source_port: 38, 'sequence: 1656212531, 'receive_window_size: 17664}
                
write_tcp_header("tcp.hdr", tcp_hdr)
assert read_tcp_header("tcp.hdr") == tcp_hdr
delete_file("tcp.hdr")

let inbytes = byte_array_reader(#u8[1, 2, 3])
let inbits = bits_reader(inbytes)
assert is_stream(inbytes)
assert is_stream(inbits)
assert is_reader(inbytes)
assert is_reader(inbits)
assert is_writer(inbytes) == false
assert is_writer(inbits) == false
close_stream(inbytes)
close_stream(inbits)
inbytes = byte_array_reader(#u8[1, 2, 3])
inbits = bits_reader(inbytes)
close_reader(inbytes)
close_reader(inbits)

let outbytes = byte_array_writer()
let outbits = bits_writer(outbytes)
assert is_stream(outbytes)
assert is_stream(outbits)
assert is_reader(outbytes) == false
assert is_reader(outbits) == false
assert is_writer(outbytes)
assert is_writer(outbits)
close_stream(outbytes)
close_stream(outbits)
outbytes = byte_array_writer()
outbits = bits_writer(outbytes)
write_bits(outbits, 10, 8)
flush_writer(outbits)
let bytes = get_output_bytes(outbytes)
assert core.count(bytes) == 1
assert bytes[0] == 10
close_writer(outbytes)
close_writer(outbits)

// u8array_to_bit_array updated to use bit_streams
assert u8array_to_bit_array(#u8[1, 2, 3]) == #b[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1]

// && operator to take precedence over ||
assert (1 < 2 || 2 == 2 && 4 == 3) == (1 < 2 || (2 == 2 && 4 == 3))
assert (1 < 2 && 2 == 2 || 4 == 3) == ((1 < 2 && 2 == 2) || 4 == 3)
assert (1 < 2 || 2 == 2 || 4 == 3) == ((1 < 2 || 2 == 2) || 4 == 3)
assert (1 < 2 && 2 == 2 && 4 == 3) == ((1 < 2 && 2 == 2) && 4 == 3)

// range support in for loop
assert (for (i = 0 to 10) i) == 10
assert (for (i = 10 downto 0) i) == 0
assert (for (i = 10 to 0) i) == false
assert (for (i = 0 downto 10) i) == false

// user-defined syntax
declare syntax
  while ($cond) $body
  => let loop ()
      when ($cond)
      { $body; loop () }

let i = 0
while (i < 5) i = i + 1
assert i == 5

module sm(a)
{ declare syntax
    mw ($cond) $body
    => let loop ()
        when ($cond)
        { $body; loop () }
  function a(x) let (i = 0) { mw (i < x) i = i + 1; i } }

assert sm.a(10) == 10

namespace sn {
  declare syntax
    nw ($cond) $body
    => let loop ()
        when ($cond)
        { $body; loop () }
  function a(x) let (i = 0) { nw (i < x) i = i + 1; i }
}

assert sn::a(10) == 10

// Compile-time code-generation with macros
declare macro
 while2($cond) $body
 => core.compiler.named_let('loop, [], core.compiler.when_($cond, core.compiler.block([$body, core.compiler.call('loop, [])])))

let j = 0
while2 (j < 5) j = j + 1
assert j == 5

declare macro
 do $body where $bindings
 => core.compiler.let_($bindings, $body),
 [$bindings:core.compiler.let_bindings_parser]

assert do a + b where (a = 100, b = 200) == 300

declare macro
  bind_names ($names, $values) $body
  => let (bindings = core.map(^(n, v) [n, v], $names, $values))
       core.compiler.let_(bindings, $body)

assert (bind_names ([a, b, c], [1, 10, 100]) [c, b, a]) == [100, 10, 1]

// Custom code-parsers
declare function parse_stared_name(tokenizer)
  let (token = tokenizer.next)
  { when (core.special_token_to_string(token) <> "*")
      core.error("expected asterisk")
    let (sym = tokenizer.next)
    { when (core.not(core.is_valid_identifier(sym)))
        core.error("invalid identifier")
      sym }}

declare macro
  str $name
  => core.symbol_to_string($name),
  [$name:parse_stared_name]

assert str * hello == "hello"